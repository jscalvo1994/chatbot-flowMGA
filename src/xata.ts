// Generated by Xata Codegen 0.29.4. Please do not edit.
import { buildClient } from "@xata.io/client";
import type {
  BaseClientOptions,
  SchemaInference,
  XataRecord,
} from "@xata.io/client";

const tables = [
  {
    name: "user",
    columns: [
      { name: "email", type: "email", unique: true },
      { name: "password", type: "string" },
    ],
    revLinks: [{ column: "userId", table: "message" }],
  },
  {
    name: "message",
    columns: [
      { name: "history", type: "json", notNull: true, defaultValue: '"[]"' },
      { name: "userId", type: "link", link: { table: "user" }, unique: true },
    ],
  },
] as const;

export type SchemaTables = typeof tables;
export type InferredTypes = SchemaInference<SchemaTables>;

export type User = InferredTypes["user"];
export type UserRecord = User & XataRecord;

export type Message = InferredTypes["message"];
export type MessageRecord = Message & XataRecord;

export type DatabaseSchema = {
  user: UserRecord;
  message: MessageRecord;
};

const DatabaseClient = buildClient();

const defaultOptions = {
  databaseURL:
    "https://V-ctor-Alfonso-Orellano-Calamb-s-s-workspace-o1msuh.us-east-1.xata.sh/db/flow-mga",
};

export class XataClient extends DatabaseClient<DatabaseSchema> {
  constructor(options?: BaseClientOptions) {
    super({ ...defaultOptions, ...options }, tables);
  }
}

let instance: XataClient | undefined = undefined;

export const getXataClient = () => {
  if (instance) return instance;

  instance = new XataClient();
  return instance;
};
